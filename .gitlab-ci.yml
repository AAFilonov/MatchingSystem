# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

variables:
  # Максимальное количество параллельно собираемых проектов при сборке решения; зависит от количества ядер ПК, выбранного для сборки
  MSBUILD_CONCURRENCY: "4"
  MSBuildSDKsPath: "C:\\Program Files\\dotnet\\sdk\\6.0.405\\Sdks"
  
  EXE_RELEASE_FOLDER: "C:\\WebFarm\\projects.iipo.tu-bryansk.ru\\diplom-matching"
  EXE_RELEASE_FILENAME: "DiplomaUI.exe"
  TEST_FOLDER: ".\\Out\\Test"
  TMP_FOLDER: ".\\Out\\Release" 
  DEPLOY_FOLDER: "C:\\GitLabUtils\\DiplomaMathcing"
  NUNIT_PATH: "C:\\Program Files (x86)\\NUnit.org\\nunit-console\\nunit3-console.exe"

stages:          # List of stages for jobs, and their order of execution
  - build
  - test
  - deploy
  - post_deploy

build_job:
  stage: build # указание, что задача принадлежит этапу build
  # tags: windows # если тут указать тэг, задача будет выполняться только на Runner-е с указанным тэгом 
  only: # для каких сущностей требуется выполнять задачу
    - branches
  before_script:
   - CHCP 65001
  script:
    - dotnet restore
    - dotnet build --configuration Release -o ".\Out\Release" #TMP_FOLDER: 
  artifacts:  
    expire_in: 2 days # сколько хранить артефакты
    paths: # список путей, по которым находятся файлы для сохранения
      - '.\Out\Release'  # saving exe to copy to deploy folder
      - '.\Out\Test'  # saving entire Test project so NUnit can run tests


test_job:   # This job runs in the test stage.
  stage: test    # It only starts when the job in the build stage completes successfully.
  only: # для каких сущностей требуется выполнять задачу
    - branches
  script:
    - echo "Running tests..."
    - '& "C:\Program Files (x86)\NUnit.org\nunit-console\nunit3-console.exe" "MatchingLibrary.Tests.dll" 
  dependencies: # указание, что для запуска этой задачи требуется успешно завершенная задача build_job
     - build_job

#возможно стоит иметь две папки деплоя
deploy_job:
  stage: deploy
  only: # для каких сущностей требуется выполнять задачу
    - branches
  script:
   ## - 'dotnet publish -o "$env:EXE_DEPLOY_FOLDER" -c Release'
     #  - "& dotnet publish -o 'C:\WebFarm\projects.iipo.tu-bryansk.ru\diplom-matching' --configuration Release" - деплой
    - echo "TODO dotnet publish в правильную папку"
  dependencies:
  environment: production
  
post_deploy_job:
  stage: post_deploy
  only: # для каких сущностей требуется выполнять задачу
    - branches
  script:
    - echo "TODO рестарт приложения через IIS"
  dependencies:
    - deploy_job
  environment: production  