# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

variables:
  # Максимальное количество параллельно собираемых проектов при сборке решения; зависит от количества ядер ПК, выбранного для сборки
  MSBUILD_CONCURRENCY: "4"
  # Тут куча путей до утилит, которые просто обязаны лежать там, где ожидается
  MSBuildSDKsPath: "C:\\Program Files\\dotnet\\sdk\\6.0.405\\Sdks"
  # XUNIT_PATH: "C:\\Tools\\xunit.runner.console.2.3.1\\xunit.console.exe"
  EXE_RELEASE_FOLDER: ".\\bin"
  EXE_RELEASE_FILENAME: "MatchingSystem.UI.exe"
  TEST_FOLDER: "Tests\\bin\\Release"
  DEPLOY_FOLDER: "C:\\GitLabUtils\\DiplomaMathcing"
  NUNIT_PATH: "C:\\Program Files (x86)\\NUnit.org\\nunit-console\\nunit3-console.exe"

stages:          # List of stages for jobs, and their order of execution
  - build
  - test
  - pre_deploy
  - deploy
  - post_deploy

build_job:
  stage: build # указание, что задача принадлежит этапу build
  # tags: windows # если тут указать тэг, задача будет выполняться только на Runner-е с указанным тэгом 
  only: # для каких сущностей требуется выполнять задачу
    - branches
  before_script:
    - CHCP 65001
  script:
    - '& dotnet restore'
    - "& dotnet build --configuration Release -o './bin'"
    - "& dotnet publish -o 'D:/DiplomaMatching/bin' --configuration Release"
  artifacts:  
    expire_in: 2 days 
    paths:
      - './bin'  

test_job:   # This job runs in the test stage.
  stage: test    # It only starts when the job in the build stage completes successfully.
  only: # для каких сущностей требуется выполнять задачу
    - branches
  script:
    - echo "Running unit tests... This will take about 60 seconds."
  #    - sleep 60
 #   - echo "Code coverage is 90%"
   # - '& "$env:XUNIT_PATH" "$env:TESTS_OUTPUT_FOLDER_PATH\CiCdExample.Tests.dll"'
  dependencies: # указание, что для запуска этой задачи требуется успешно завершенная задача build_job
     - build_job

pre_deploy_job:
  stage: pre_deploy
  script:
    - '(taskkill /F /IM MatchingSystem.UI.exe) -or (echo "MatchingSystem.UI.exe not running...")'
  dependencies:
    - build_job
    - test_job
  environment: production
  
#возможно стоит иметь две папки деплоя
deploy_job:
  stage: deploy
  only: # для каких сущностей требуется выполнять задачу
    - branches
  script:
   ## - 'dotnet publish -o "$env:EXE_DEPLOY_FOLDER" -c Release'
    - echo "Application successfully deployed."
  dependencies:
    - pre_deploy_job
  environment: production
  
post_deploy_job:
  stage: post_deploy
  only: # для каких сущностей требуется выполнять задачу
    - branches
  script:
    - echo 'TODO когда нибудь сделать запуск приложения'
    #- "$env:EXE_DEPLOY_FOLDER/$env:EXE_RELEASE_FILENAME"
  dependencies:
    - deploy_job
  environment: production  