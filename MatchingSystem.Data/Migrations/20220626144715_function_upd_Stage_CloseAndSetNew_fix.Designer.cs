// <auto-generated />
using System;
using MatchingSystem.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MatchingSystem.Data.Migrations
{
    [DbContext(typeof(DiplomaMatchingContext))]
    [Migration("20220626144715_function_upd_Stage_CloseAndSetNew_fix")]
    partial class function_upd_Stage_CloseAndSetNew_fix
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("MatchingSystem.Data.Model.ActiveCommonQuota", b =>
                {
                    b.Property<int>("CommonQuotaId")
                        .HasColumnType("int")
                        .HasColumnName("CommonQuotaID");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsNotification")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<short?>("Qty")
                        .HasColumnType("smallint");

                    b.Property<int>("QuotaStateId")
                        .HasColumnType("int")
                        .HasColumnName("QuotaStateID");

                    b.Property<int?>("StageId")
                        .HasColumnType("int")
                        .HasColumnName("StageID");

                    b.Property<int?>("TutorId")
                        .HasColumnType("int")
                        .HasColumnName("TutorID");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.ToView("ActiveCommonQuotas", "dbo_v");
                });

            modelBuilder.Entity("MatchingSystem.Data.Model.Allocation", b =>
                {
                    b.Property<int?>("ChoiceId")
                        .HasColumnType("int")
                        .HasColumnName("ChoiceID");

                    b.Property<int>("GroupId")
                        .HasColumnType("int")
                        .HasColumnName("GroupID");

                    b.Property<int>("IsAllocated")
                        .HasColumnType("int");

                    b.Property<int>("MatchingId")
                        .HasColumnType("int")
                        .HasColumnName("MatchingID");

                    b.Property<int?>("PreferenceId")
                        .HasColumnType("int")
                        .HasColumnName("PreferenceID");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int")
                        .HasColumnName("ProjectID");

                    b.Property<short?>("SortOrderNumber")
                        .HasColumnType("smallint");

                    b.Property<int>("StageTypeCode")
                        .HasColumnType("int");

                    b.Property<int>("StageTypeId")
                        .HasColumnType("int")
                        .HasColumnName("StageTypeID");

                    b.Property<string>("StageTypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("StageTypeNameRu")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("StageTypeName_ru");

                    b.Property<int>("StudentId")
                        .HasColumnType("int")
                        .HasColumnName("StudentID");

                    b.Property<int?>("TypeCode")
                        .HasColumnType("int");

                    b.Property<int?>("TypeId")
                        .HasColumnType("int")
                        .HasColumnName("TypeID");

                    b.Property<string>("TypeName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TypeNameRu")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("TypeName_ru");

                    b.ToView("Allocation", "dbo_v");
                });

            modelBuilder.Entity("MatchingSystem.Data.Model.AllocationFullInfo", b =>
                {
                    b.Property<int?>("ChoiceId")
                        .HasColumnType("int")
                        .HasColumnName("ChoiceID");

                    b.Property<int?>("GroupId")
                        .HasColumnType("int")
                        .HasColumnName("GroupID");

                    b.Property<string>("GroupName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("IsAllocated")
                        .HasColumnType("int");

                    b.Property<int>("MatchingId")
                        .HasColumnType("int")
                        .HasColumnName("MatchingID");

                    b.Property<int?>("PreferenceId")
                        .HasColumnType("int")
                        .HasColumnName("PreferenceID");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int")
                        .HasColumnName("ProjectID");

                    b.Property<string>("ProjectName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<short?>("SortOrderNumber")
                        .HasColumnType("smallint");

                    b.Property<int>("StageTypeCode")
                        .HasColumnType("int");

                    b.Property<int>("StageTypeId")
                        .HasColumnType("int")
                        .HasColumnName("StageTypeID");

                    b.Property<string>("StageTypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("StageTypeNameRu")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("StageTypeName_ru");

                    b.Property<int?>("StudentId")
                        .HasColumnType("int")
                        .HasColumnName("StudentID");

                    b.Property<string>("StudentName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("StudentNameAbbreviation")
                        .HasMaxLength(106)
                        .HasColumnType("nvarchar(106)");

                    b.Property<string>("StudentPatronimic")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("StudentSurname")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("TutorId")
                        .HasColumnType("int")
                        .HasColumnName("TutorID");

                    b.Property<string>("TutorName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TutorNameAbbreviation")
                        .HasMaxLength(106)
                        .HasColumnType("nvarchar(106)");

                    b.Property<string>("TutorPatronimic")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TutorSurname")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("TypeCode")
                        .HasColumnType("int");

                    b.Property<int?>("TypeId")
                        .HasColumnType("int")
                        .HasColumnName("TypeID");

                    b.Property<string>("TypeName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TypeNameRu")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("TypeName_ru");

                    b.ToView("Allocation_FullInfo", "dbo_v");
                });

            modelBuilder.Entity("MatchingSystem.Data.Model.AvailableStudentsPreference", b =>
                {
                    b.Property<bool?>("IsInUse")
                        .HasColumnType("bit");

                    b.Property<int?>("MatchingId")
                        .HasColumnType("int")
                        .HasColumnName("MatchingID");

                    b.Property<short>("OrderNumber")
                        .HasColumnType("smallint");

                    b.Property<int>("PreferenceId")
                        .HasColumnType("int")
                        .HasColumnName("PreferenceID");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int")
                        .HasColumnName("ProjectID");

                    b.Property<int>("StudentId")
                        .HasColumnType("int")
                        .HasColumnName("StudentID");

                    b.ToView("AvailableStudentsPreferences", "dbo_v");
                });

            modelBuilder.Entity("MatchingSystem.Data.Model.ChoosingType", b =>
                {
                    b.Property<int>("TypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TypeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TypeId"), 1L, 1);

                    b.Property<int>("TypeCode")
                        .HasColumnType("int");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TypeNameRu")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("TypeName_ru");

                    b.HasKey("TypeId");

                    b.ToTable("ChoosingTypes");
                });

            modelBuilder.Entity("MatchingSystem.Data.Model.CommonQuota", b =>
                {
                    b.Property<int>("CommonQuotaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CommonQuotaID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommonQuotaId"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("IsNotification")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<short?>("Qty")
                        .HasColumnType("smallint");

                    b.Property<int>("QuotaStateId")
                        .HasColumnType("int")
                        .HasColumnName("QuotaStateID");

                    b.Property<int?>("StageId")
                        .HasColumnType("int")
                        .HasColumnName("StageID");

                    b.Property<int?>("TutorId")
                        .HasColumnType("int")
                        .HasColumnName("TutorID");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.HasKey("CommonQuotaId");

                    b.HasIndex("QuotaStateId");

                    b.HasIndex("StageId");

                    b.HasIndex("TutorId");

                    b.ToTable("CommonQuotas");
                });

            modelBuilder.Entity("MatchingSystem.Data.Model.CommonQuota1", b =>
                {
                    b.Property<int>("CommonQuotaId")
                        .HasColumnType("int")
                        .HasColumnName("CommonQuotaID");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsCurrent")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsNotification")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsReadyToStart")
                        .HasColumnType("bit");

                    b.Property<short?>("IterationNumber")
                        .HasColumnType("smallint");

                    b.Property<int?>("MatchingId")
                        .HasColumnType("int")
                        .HasColumnName("MatchingID");

                    b.Property<string>("Message")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<short?>("Qty")
                        .HasColumnType("smallint");

                    b.Property<int>("QuotaStateCode")
                        .HasColumnType("int");

                    b.Property<int>("QuotaStateId")
                        .HasColumnType("int")
                        .HasColumnName("QuotaStateID");

                    b.Property<string>("QuotaStateName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("QuotaStateNameRu")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("QuotaStateName_ru");

                    b.Property<int?>("StageId")
                        .HasColumnType("int")
                        .HasColumnName("StageID");

                    b.Property<int>("StageTypeCode")
                        .HasColumnType("int");

                    b.Property<string>("StageTypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("StageTypeNameRu")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("StageTypeName_ru");

                    b.Property<int>("TutorId")
                        .HasColumnType("int")
                        .HasColumnName("TutorID");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.ToView("CommonQuotas", "dbo_v");
                });

            modelBuilder.Entity("MatchingSystem.Data.Model.Document", b =>
                {
                    b.Property<int>("DocumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DocumentID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DocumentId"), 1L, 1);

                    b.Property<string>("DocumentName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StageId")
                        .HasColumnType("int")
                        .HasColumnName("StageID");

                    b.HasKey("DocumentId");

                    b.HasIndex("StageId");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("MatchingSystem.Data.Model.Group", b =>
                {
                    b.Property<int>("GroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("GroupID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GroupId"), 1L, 1);

                    b.Property<int?>("GroupBk")
                        .HasColumnType("int")
                        .HasColumnName("GroupBK");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("MatchingId")
                        .HasColumnType("int")
                        .HasColumnName("MatchingID");

                    b.HasKey("GroupId");

                    b.HasIndex("MatchingId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("MatchingSystem.Data.Model.Log", b =>
                {
                    b.Property<string>("Endpoint")
                        .HasColumnType("text");

                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Request")
                        .HasColumnType("text");

                    b.Property<DateTime?>("RequestDate")
                        .HasColumnType("datetime2");

                    b.ToTable("Log", (string)null);
                });

            modelBuilder.Entity("MatchingSystem.Data.Model.Matching", b =>
                {
                    b.Property<int>("MatchingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MatchingID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MatchingId"), 1L, 1);

                    b.Property<int?>("CreatorUserId")
                        .HasColumnType("int")
                        .HasColumnName("CreatorUserID");

                    b.Property<string>("MatchingName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("MatchingTypeId")
                        .HasColumnType("int")
                        .HasColumnName("MatchingTypeID");

                    b.HasKey("MatchingId");

                    b.HasIndex("MatchingTypeId");

                    b.ToTable("Matching", (string)null);
                });

            modelBuilder.Entity("MatchingSystem.Data.Model.MatchingType", b =>
                {
                    b.Property<int>("MatchingTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MatchingTypeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MatchingTypeId"), 1L, 1);

                    b.Property<string>("MatchingTypeCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MatchingTypeName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MatchingTypeNameRu")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("MatchingTypeName_ru");

                    b.HasKey("MatchingTypeId");

                    b.ToTable("MatchingType", (string)null);
                });

            modelBuilder.Entity("MatchingSystem.Data.Model.Project", b =>
                {
                    b.Property<int>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProjectID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProjectId"), 1L, 1);

                    b.Property<DateTime?>("CloseDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("CloseStage")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Info")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsClosed")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<int?>("MatchingId")
                        .HasColumnType("int")
                        .HasColumnName("MatchingID");

                    b.Property<string>("ProjectName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<short?>("ProjectQuotaDelta")
                        .HasColumnType("smallint");

                    b.Property<short?>("ProjectQuotaQty")
                        .HasColumnType("smallint");

                    b.Property<int>("TutorId")
                        .HasColumnType("int")
                        .HasColumnName("TutorID");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.HasKey("ProjectId");

                    b.HasIndex("TutorId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("MatchingSystem.Data.Model.Project1", b =>
                {
                    b.Property<string>("AvailableGroupsNameList")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("AvailableGroupsName_List");

                    b.Property<string>("Info")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsClosed")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<int?>("MatchingId")
                        .HasColumnType("int")
                        .HasColumnName("MatchingID");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int")
                        .HasColumnName("ProjectID");

                    b.Property<string>("ProjectName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<short?>("Qty")
                        .HasColumnType("smallint");

                    b.Property<string>("QtyDescription")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TechnologiesNameList")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("TechnologiesName_List");

                    b.Property<int>("TutorId")
                        .HasColumnType("int")
                        .HasColumnName("TutorID");

                    b.Property<bool>("TutorIsClosed")
                        .HasColumnType("bit")
                        .HasColumnName("Tutor_IsClosed");

                    b.Property<string>("TutorName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TutorNameAbbreviation")
                        .HasMaxLength(106)
                        .HasColumnType("nvarchar(106)");

                    b.Property<string>("TutorPatronimic")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TutorSurname")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.Property<string>("WorkDirectionsNameList")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("WorkDirectionsName_List");

                    b.ToView("Projects", "dbo_v");
                });

            modelBuilder.Entity("MatchingSystem.Data.Model.ProjectsGroup", b =>
                {
                    b.Property<int>("ProjectGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProjectGroupID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProjectGroupId"), 1L, 1);

                    b.Property<int>("GroupId")
                        .HasColumnType("int")
                        .HasColumnName("GroupID");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int")
                        .HasColumnName("ProjectID");

                    b.HasKey("ProjectGroupId")
                        .HasName("PK__Projects__17125E7ED62BC05D");

                    b.HasIndex("GroupId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Projects_Groups", (string)null);
                });

            modelBuilder.Entity("MatchingSystem.Data.Model.ProjectsTechnology", b =>
                {
                    b.Property<int>("ProjectTechnologyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProjectTechnologyID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProjectTechnologyId"), 1L, 1);

                    b.Property<int>("ProjectId")
                        .HasColumnType("int")
                        .HasColumnName("ProjectID");

                    b.Property<int>("TechnologyId")
                        .HasColumnType("int")
                        .HasColumnName("TechnologyID");

                    b.HasKey("ProjectTechnologyId")
                        .HasName("PK_ProjectsTechnologies");

                    b.HasIndex("ProjectId");

                    b.HasIndex("TechnologyId");

                    b.ToTable("Projects_Technologies", (string)null);
                });

            modelBuilder.Entity("MatchingSystem.Data.Model.ProjectsWorkDirection", b =>
                {
                    b.Property<int>("ProjectDirectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProjectDirectionID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProjectDirectionId"), 1L, 1);

                    b.Property<int>("DirectionId")
                        .HasColumnType("int")
                        .HasColumnName("DirectionID");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int")
                        .HasColumnName("ProjectID");

                    b.HasKey("ProjectDirectionId")
                        .HasName("PK_Projects_Directions");

                    b.HasIndex("DirectionId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Projects_WorkDirections", (string)null);
                });

            modelBuilder.Entity("MatchingSystem.Data.Model.QuotasState", b =>
                {
                    b.Property<int>("QuotaStateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("QuotaStateID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuotaStateId"), 1L, 1);

                    b.Property<int>("QuotaStateCode")
                        .HasColumnType("int");

                    b.Property<string>("QuotaStateName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("QuotaStateNameRu")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("QuotaStateName_ru");

                    b.HasKey("QuotaStateId");

                    b.ToTable("QuotasStates");
                });

            modelBuilder.Entity("MatchingSystem.Data.Model.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RoleID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"), 1L, 1);

                    b.Property<int?>("RoleCode")
                        .HasColumnType("int");

                    b.Property<string>("RoleName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RoleNameRu")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("RoleName_ru");

                    b.Property<short?>("RoleType")
                        .HasColumnType("smallint");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("MatchingSystem.Data.Model.Stage", b =>
                {
                    b.Property<int>("StageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StageID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StageId"), 1L, 1);

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("EndPlanDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsCurrent")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<short?>("IterationNumber")
                        .HasColumnType("smallint");

                    b.Property<int>("MatchingId")
                        .HasColumnType("int")
                        .HasColumnName("MatchingID");

                    b.Property<string>("StageName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("StageTypeId")
                        .HasColumnType("int")
                        .HasColumnName("StageTypeID");

                    b.Property<DateTime?>("StartDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("StageId");

                    b.HasIndex("MatchingId");

                    b.HasIndex("StageTypeId");

                    b.ToTable("Stages");
                });

            modelBuilder.Entity("MatchingSystem.Data.Model.StagesType", b =>
                {
                    b.Property<int>("StageTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StageTypeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StageTypeId"), 1L, 1);

                    b.Property<int>("StageTypeCode")
                        .HasColumnType("int");

                    b.Property<string>("StageTypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("StageTypeNameRu")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("StageTypeName_ru");

                    b.HasKey("StageTypeId");

                    b.ToTable("StagesTypes");
                });

            modelBuilder.Entity("MatchingSystem.Data.Model.Student", b =>
                {
                    b.Property<int>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StudentID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudentId"), 1L, 1);

                    b.Property<int>("GroupId")
                        .HasColumnType("int")
                        .HasColumnName("GroupID");

                    b.Property<string>("Info")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Info2")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("MatchingId")
                        .HasColumnType("int")
                        .HasColumnName("MatchingID");

                    b.Property<int?>("StudentBk")
                        .HasColumnType("int")
                        .HasColumnName("StudentBK");

                    b.HasKey("StudentId");

                    b.HasIndex("GroupId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("MatchingSystem.Data.Model.Student1", b =>
                {
                    b.Property<int>("GroupId")
                        .HasColumnType("int")
                        .HasColumnName("GroupID");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Info")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Info2")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime?>("LastVisitDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("MatchingId")
                        .HasColumnType("int")
                        .HasColumnName("MatchingID");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NameAbbreviation")
                        .HasMaxLength(106)
                        .HasColumnType("nvarchar(106)");

                    b.Property<string>("Patronimic")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("StudentId")
                        .HasColumnType("int")
                        .HasColumnName("StudentID");

                    b.Property<string>("Surname")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TechnologiesNameList")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("TechnologiesName_List");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.Property<string>("WorkDirectionsNameList")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("WorkDirectionsName_List");

                    b.ToView("Students", "dbo_v");
                });

            modelBuilder.Entity("MatchingSystem.Data.Model.StudentsPreference", b =>
                {
                    b.Property<int>("PreferenceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PreferenceID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PreferenceId"), 1L, 1);

                    b.Property<DateTime?>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("IsAvailable")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsInUse")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("IsUsed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<short>("OrderNumber")
                        .HasColumnType("smallint");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int")
                        .HasColumnName("ProjectID");

                    b.Property<int>("StudentId")
                        .HasColumnType("int")
                        .HasColumnName("StudentID");

                    b.Property<int?>("TypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TypeID")
                        .HasDefaultValueSql("((1))");

                    b.HasKey("PreferenceId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("StudentId");

                    b.HasIndex("TypeId");

                    b.ToTable("StudentsPreferences");
                });

            modelBuilder.Entity("MatchingSystem.Data.Model.StudentsTechnology", b =>
                {
                    b.Property<int>("StudentTechnologyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StudentTechnologyID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudentTechnologyId"), 1L, 1);

                    b.Property<int>("StudentId")
                        .HasColumnType("int")
                        .HasColumnName("StudentID");

                    b.Property<int>("TechnologyId")
                        .HasColumnType("int")
                        .HasColumnName("TechnologyID");

                    b.HasKey("StudentTechnologyId")
                        .HasName("PK_StudentsTechnologies");

                    b.HasIndex("StudentId");

                    b.HasIndex("TechnologyId");

                    b.ToTable("Students_Technologies", (string)null);
                });

            modelBuilder.Entity("MatchingSystem.Data.Model.StudentsWorkDirection", b =>
                {
                    b.Property<int>("StudentDirectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StudentDirectionID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudentDirectionId"), 1L, 1);

                    b.Property<int>("DirectionId")
                        .HasColumnType("int")
                        .HasColumnName("DirectionID");

                    b.Property<int>("StudentId")
                        .HasColumnType("int")
                        .HasColumnName("StudentID");

                    b.HasKey("StudentDirectionId")
                        .HasName("PK_StudentsDirections");

                    b.HasIndex("DirectionId");

                    b.HasIndex("StudentId");

                    b.ToTable("Students_WorkDirections", (string)null);
                });

            modelBuilder.Entity("MatchingSystem.Data.Model.Technology", b =>
                {
                    b.Property<int>("TechnologyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TechnologyID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TechnologyId"), 1L, 1);

                    b.Property<int>("TechnologyCode")
                        .HasColumnType("int");

                    b.Property<string>("TechnologyNameRu")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("TechnologyName_ru");

                    b.HasKey("TechnologyId");

                    b.ToTable("Technologies");
                });

            modelBuilder.Entity("MatchingSystem.Data.Model.Tutor", b =>
                {
                    b.Property<int>("TutorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TutorID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TutorId"), 1L, 1);

                    b.Property<short?>("CloseIterationNumber")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsReadyToStart")
                        .HasColumnType("bit");

                    b.Property<int?>("MatchingId")
                        .HasColumnType("int")
                        .HasColumnName("MatchingID");

                    b.Property<int?>("TutorBk")
                        .HasColumnType("int")
                        .HasColumnName("TutorBK");

                    b.HasKey("TutorId");

                    b.ToTable("Tutors");
                });

            modelBuilder.Entity("MatchingSystem.Data.Model.Tutor1", b =>
                {
                    b.Property<bool>("IsClosed")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsReadyToStart")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastVisitDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("MatchingId")
                        .HasColumnType("int")
                        .HasColumnName("MatchingID");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NameAbbreviation")
                        .HasMaxLength(106)
                        .HasColumnType("nvarchar(106)");

                    b.Property<string>("Patronimic")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Surname")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("TutorId")
                        .HasColumnType("int")
                        .HasColumnName("TutorID");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.ToView("Tutors", "dbo_v");
                });

            modelBuilder.Entity("MatchingSystem.Data.Model.TutorsChoice", b =>
                {
                    b.Property<int>("ChoiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ChoiceID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChoiceId"), 1L, 1);

                    b.Property<DateTime?>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("IsChangeble")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsFromPreviousIteration")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInQuota")
                        .HasColumnType("bit");

                    b.Property<short?>("IterationNumber")
                        .HasColumnType("smallint");

                    b.Property<int?>("PreferenceId")
                        .HasColumnType("int")
                        .HasColumnName("PreferenceID");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int")
                        .HasColumnName("ProjectID");

                    b.Property<short?>("SortOrderNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((32767))");

                    b.Property<int>("StageId")
                        .HasColumnType("int")
                        .HasColumnName("StageID");

                    b.Property<int>("StudentId")
                        .HasColumnType("int")
                        .HasColumnName("StudentID");

                    b.Property<int>("TypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TypeID")
                        .HasDefaultValueSql("((2))");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.HasKey("ChoiceId")
                        .HasName("PK_TutorsMatching");

                    b.HasIndex("ProjectId");

                    b.HasIndex("StageId");

                    b.HasIndex("StudentId");

                    b.HasIndex("TypeId");

                    b.ToTable("TutorsChoice", (string)null);
                });

            modelBuilder.Entity("MatchingSystem.Data.Model.TutorsGroup", b =>
                {
                    b.Property<int>("TutorGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TutorGroupID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TutorGroupId"), 1L, 1);

                    b.Property<int>("GroupId")
                        .HasColumnType("int")
                        .HasColumnName("GroupID");

                    b.Property<int>("TutorId")
                        .HasColumnType("int")
                        .HasColumnName("TutorID");

                    b.HasKey("TutorGroupId");

                    b.HasIndex("GroupId");

                    b.HasIndex("TutorId");

                    b.ToTable("Tutors_Groups", (string)null);
                });

            modelBuilder.Entity("MatchingSystem.Data.Model.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"), 1L, 1);

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("LastVisitDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NameAbbreviation")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("nvarchar(max)")
                        .HasComputedColumnSql("[Name] + ' ' + [Patronimic]+ ' ' + [Surname]");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Patronimic")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Surname")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("UserBk")
                        .HasColumnType("int")
                        .HasColumnName("UserBK");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MatchingSystem.Data.Model.UsersFullInfo", b =>
                {
                    b.Property<int?>("GroupId")
                        .HasColumnType("int")
                        .HasColumnName("GroupID");

                    b.Property<string>("GroupName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("LastVisitDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("MatchingId")
                        .HasColumnType("int")
                        .HasColumnName("MatchingID");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NameAbbreviation")
                        .HasMaxLength(106)
                        .HasColumnType("nvarchar(106)");

                    b.Property<string>("Patronimic")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("RoleCode")
                        .HasColumnType("int");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("RoleID");

                    b.Property<string>("RoleName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RoleNameRu")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("RoleName_ru");

                    b.Property<short?>("RoleType")
                        .HasColumnType("smallint");

                    b.Property<int?>("StudentId")
                        .HasColumnType("int")
                        .HasColumnName("StudentID");

                    b.Property<string>("Surname")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("TutorId")
                        .HasColumnType("int")
                        .HasColumnName("TutorID");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.ToView("Users_FullInfo", "dbo_v");
                });

            modelBuilder.Entity("MatchingSystem.Data.Model.UsersRole", b =>
                {
                    b.Property<int>("UserRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserRoleID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserRoleId"), 1L, 1);

                    b.Property<DateTime?>("LastVisitDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("MatchingId")
                        .HasColumnType("int")
                        .HasColumnName("MatchingID");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("RoleID");

                    b.Property<int?>("StudentId")
                        .HasColumnType("int")
                        .HasColumnName("StudentID");

                    b.Property<int?>("TutorId")
                        .HasColumnType("int")
                        .HasColumnName("TutorID");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("UserRoleId");

                    b.HasIndex("MatchingId");

                    b.HasIndex("RoleId");

                    b.HasIndex("StudentId");

                    b.HasIndex("TutorId");

                    b.HasIndex("UserId");

                    b.ToTable("Users_Roles", (string)null);
                });

            modelBuilder.Entity("MatchingSystem.Data.Model.VersionInfo", b =>
                {
                    b.Property<DateTime?>("AppliedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<long>("Version")
                        .HasColumnType("bigint");

                    b.HasIndex(new[] { "Version" }, "UC_Version")
                        .IsUnique();

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex(new[] { "Version" }, "UC_Version"));

                    b.ToTable("VersionInfo", (string)null);
                });

            modelBuilder.Entity("MatchingSystem.Data.Model.WorkDirection", b =>
                {
                    b.Property<int>("DirectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DirectionID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DirectionId"), 1L, 1);

                    b.Property<int>("DirectionCode")
                        .HasColumnType("int");

                    b.Property<string>("DirectionNameRu")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("DirectionName_ru");

                    b.HasKey("DirectionId")
                        .HasName("PK_Directions");

                    b.ToTable("WorkDirections");
                });

            modelBuilder.Entity("MatchingSystem.Data.Model.CommonQuota", b =>
                {
                    b.HasOne("MatchingSystem.Data.Model.QuotasState", "QuotaState")
                        .WithMany("CommonQuota")
                        .HasForeignKey("QuotaStateId")
                        .IsRequired()
                        .HasConstraintName("FK_CommonQuotas_QuotasStates");

                    b.HasOne("MatchingSystem.Data.Model.Stage", "Stage")
                        .WithMany("CommonQuota")
                        .HasForeignKey("StageId")
                        .HasConstraintName("FK_CommonQuotas_Stages");

                    b.HasOne("MatchingSystem.Data.Model.Tutor", "Tutor")
                        .WithMany("CommonQuota")
                        .HasForeignKey("TutorId")
                        .HasConstraintName("FK_CommonQuotas_Tutors");

                    b.Navigation("QuotaState");

                    b.Navigation("Stage");

                    b.Navigation("Tutor");
                });

            modelBuilder.Entity("MatchingSystem.Data.Model.Document", b =>
                {
                    b.HasOne("MatchingSystem.Data.Model.Stage", "Stage")
                        .WithMany("Documents")
                        .HasForeignKey("StageId")
                        .IsRequired()
                        .HasConstraintName("FK_Documents_Stages");

                    b.Navigation("Stage");
                });

            modelBuilder.Entity("MatchingSystem.Data.Model.Group", b =>
                {
                    b.HasOne("MatchingSystem.Data.Model.Matching", "Matching")
                        .WithMany("Groups")
                        .HasForeignKey("MatchingId")
                        .HasConstraintName("FK_Groups_Matching");

                    b.Navigation("Matching");
                });

            modelBuilder.Entity("MatchingSystem.Data.Model.Matching", b =>
                {
                    b.HasOne("MatchingSystem.Data.Model.MatchingType", "MatchingType")
                        .WithMany("Matchings")
                        .HasForeignKey("MatchingTypeId")
                        .HasConstraintName("FK_Matching_MatchingType");

                    b.Navigation("MatchingType");
                });

            modelBuilder.Entity("MatchingSystem.Data.Model.Project", b =>
                {
                    b.HasOne("MatchingSystem.Data.Model.Tutor", "Tutor")
                        .WithMany("Projects")
                        .HasForeignKey("TutorId")
                        .IsRequired()
                        .HasConstraintName("FK_Projects_Tutors");

                    b.Navigation("Tutor");
                });

            modelBuilder.Entity("MatchingSystem.Data.Model.ProjectsGroup", b =>
                {
                    b.HasOne("MatchingSystem.Data.Model.Group", "Group")
                        .WithMany("ProjectsGroups")
                        .HasForeignKey("GroupId")
                        .IsRequired()
                        .HasConstraintName("FK_Projects_Groups_Groups");

                    b.HasOne("MatchingSystem.Data.Model.Project", "Project")
                        .WithMany("ProjectsGroups")
                        .HasForeignKey("ProjectId")
                        .IsRequired()
                        .HasConstraintName("FK_Projects_Groups_Projects");

                    b.Navigation("Group");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("MatchingSystem.Data.Model.ProjectsTechnology", b =>
                {
                    b.HasOne("MatchingSystem.Data.Model.Project", "Project")
                        .WithMany("ProjectsTechnologies")
                        .HasForeignKey("ProjectId")
                        .IsRequired()
                        .HasConstraintName("FK_Projects_Technologies_Projects");

                    b.HasOne("MatchingSystem.Data.Model.Technology", "Technology")
                        .WithMany("ProjectsTechnologies")
                        .HasForeignKey("TechnologyId")
                        .IsRequired()
                        .HasConstraintName("FK_Projects_Technologies_Technologies");

                    b.Navigation("Project");

                    b.Navigation("Technology");
                });

            modelBuilder.Entity("MatchingSystem.Data.Model.ProjectsWorkDirection", b =>
                {
                    b.HasOne("MatchingSystem.Data.Model.WorkDirection", "Direction")
                        .WithMany("ProjectsWorkDirections")
                        .HasForeignKey("DirectionId")
                        .IsRequired()
                        .HasConstraintName("FK_Projects_WorkDirections_WorkDirections");

                    b.HasOne("MatchingSystem.Data.Model.Project", "Project")
                        .WithMany("ProjectsWorkDirections")
                        .HasForeignKey("ProjectId")
                        .IsRequired()
                        .HasConstraintName("FK_Projects_WorkDirections_Projects");

                    b.Navigation("Direction");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("MatchingSystem.Data.Model.Stage", b =>
                {
                    b.HasOne("MatchingSystem.Data.Model.Matching", "Matching")
                        .WithMany("Stages")
                        .HasForeignKey("MatchingId")
                        .IsRequired()
                        .HasConstraintName("FK_Stages_Matching");

                    b.HasOne("MatchingSystem.Data.Model.StagesType", "StageType")
                        .WithMany("Stages")
                        .HasForeignKey("StageTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_Stages_StagesTypes");

                    b.Navigation("Matching");

                    b.Navigation("StageType");
                });

            modelBuilder.Entity("MatchingSystem.Data.Model.Student", b =>
                {
                    b.HasOne("MatchingSystem.Data.Model.Group", "Group")
                        .WithMany("Students")
                        .HasForeignKey("GroupId")
                        .IsRequired()
                        .HasConstraintName("FK_Students_Groups");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("MatchingSystem.Data.Model.StudentsPreference", b =>
                {
                    b.HasOne("MatchingSystem.Data.Model.Project", "Project")
                        .WithMany("StudentsPreferences")
                        .HasForeignKey("ProjectId")
                        .IsRequired()
                        .HasConstraintName("FK_StudentsPreferences_Projects");

                    b.HasOne("MatchingSystem.Data.Model.Student", "Student")
                        .WithMany("StudentsPreferences")
                        .HasForeignKey("StudentId")
                        .IsRequired()
                        .HasConstraintName("FK_StudentsPreferences_Students");

                    b.HasOne("MatchingSystem.Data.Model.ChoosingType", "Type")
                        .WithMany("StudentsPreferences")
                        .HasForeignKey("TypeId")
                        .HasConstraintName("FK_StudentsPreferences_ChoosingTypes");

                    b.Navigation("Project");

                    b.Navigation("Student");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("MatchingSystem.Data.Model.StudentsTechnology", b =>
                {
                    b.HasOne("MatchingSystem.Data.Model.Student", "Student")
                        .WithMany("StudentsTechnologies")
                        .HasForeignKey("StudentId")
                        .IsRequired()
                        .HasConstraintName("FK_Students_Technologies_Students");

                    b.HasOne("MatchingSystem.Data.Model.Technology", "Technology")
                        .WithMany("StudentsTechnologies")
                        .HasForeignKey("TechnologyId")
                        .IsRequired()
                        .HasConstraintName("FK_Students_Technologies_Technologies");

                    b.Navigation("Student");

                    b.Navigation("Technology");
                });

            modelBuilder.Entity("MatchingSystem.Data.Model.StudentsWorkDirection", b =>
                {
                    b.HasOne("MatchingSystem.Data.Model.WorkDirection", "Direction")
                        .WithMany("StudentsWorkDirections")
                        .HasForeignKey("DirectionId")
                        .IsRequired()
                        .HasConstraintName("FK_Students_WorkDirections_WorkDirections");

                    b.HasOne("MatchingSystem.Data.Model.Student", "Student")
                        .WithMany("StudentsWorkDirections")
                        .HasForeignKey("StudentId")
                        .IsRequired()
                        .HasConstraintName("FK_Students_WorkDirections_Students");

                    b.Navigation("Direction");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("MatchingSystem.Data.Model.TutorsChoice", b =>
                {
                    b.HasOne("MatchingSystem.Data.Model.Project", "Project")
                        .WithMany("TutorsChoices")
                        .HasForeignKey("ProjectId")
                        .IsRequired()
                        .HasConstraintName("FK_TutorsChoice_Projects");

                    b.HasOne("MatchingSystem.Data.Model.Stage", "Stage")
                        .WithMany("TutorsChoices")
                        .HasForeignKey("StageId")
                        .IsRequired()
                        .HasConstraintName("FK_TutorsChoice_Stages");

                    b.HasOne("MatchingSystem.Data.Model.Student", "Student")
                        .WithMany("TutorsChoices")
                        .HasForeignKey("StudentId")
                        .IsRequired()
                        .HasConstraintName("FK_TutorsChoice_Students");

                    b.HasOne("MatchingSystem.Data.Model.ChoosingType", "Type")
                        .WithMany("TutorsChoices")
                        .HasForeignKey("TypeId")
                        .IsRequired()
                        .HasConstraintName("FK_TutorsChoice_ChoosingTypes");

                    b.Navigation("Project");

                    b.Navigation("Stage");

                    b.Navigation("Student");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("MatchingSystem.Data.Model.TutorsGroup", b =>
                {
                    b.HasOne("MatchingSystem.Data.Model.Group", "Group")
                        .WithMany("TutorsGroups")
                        .HasForeignKey("GroupId")
                        .IsRequired()
                        .HasConstraintName("FK_Tutors_Groups_Groups");

                    b.HasOne("MatchingSystem.Data.Model.Tutor", "Tutor")
                        .WithMany("TutorsGroups")
                        .HasForeignKey("TutorId")
                        .IsRequired()
                        .HasConstraintName("FK_Tutors_Groups_Tutors");

                    b.Navigation("Group");

                    b.Navigation("Tutor");
                });

            modelBuilder.Entity("MatchingSystem.Data.Model.UsersRole", b =>
                {
                    b.HasOne("MatchingSystem.Data.Model.Matching", "Matching")
                        .WithMany("UsersRoles")
                        .HasForeignKey("MatchingId")
                        .HasConstraintName("FK_Users_Roles_Matching");

                    b.HasOne("MatchingSystem.Data.Model.Role", "Role")
                        .WithMany("UsersRoles")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK_Users_Roles_Roles");

                    b.HasOne("MatchingSystem.Data.Model.Student", "Student")
                        .WithMany("UsersRoles")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK_Users_Roles_Students");

                    b.HasOne("MatchingSystem.Data.Model.Tutor", "Tutor")
                        .WithMany("UsersRoles")
                        .HasForeignKey("TutorId")
                        .HasConstraintName("FK_Users_Roles_Tutors");

                    b.HasOne("MatchingSystem.Data.Model.User", "User")
                        .WithMany("UsersRoles")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Users_Roles_Users");

                    b.Navigation("Matching");

                    b.Navigation("Role");

                    b.Navigation("Student");

                    b.Navigation("Tutor");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MatchingSystem.Data.Model.ChoosingType", b =>
                {
                    b.Navigation("StudentsPreferences");

                    b.Navigation("TutorsChoices");
                });

            modelBuilder.Entity("MatchingSystem.Data.Model.Group", b =>
                {
                    b.Navigation("ProjectsGroups");

                    b.Navigation("Students");

                    b.Navigation("TutorsGroups");
                });

            modelBuilder.Entity("MatchingSystem.Data.Model.Matching", b =>
                {
                    b.Navigation("Groups");

                    b.Navigation("Stages");

                    b.Navigation("UsersRoles");
                });

            modelBuilder.Entity("MatchingSystem.Data.Model.MatchingType", b =>
                {
                    b.Navigation("Matchings");
                });

            modelBuilder.Entity("MatchingSystem.Data.Model.Project", b =>
                {
                    b.Navigation("ProjectsGroups");

                    b.Navigation("ProjectsTechnologies");

                    b.Navigation("ProjectsWorkDirections");

                    b.Navigation("StudentsPreferences");

                    b.Navigation("TutorsChoices");
                });

            modelBuilder.Entity("MatchingSystem.Data.Model.QuotasState", b =>
                {
                    b.Navigation("CommonQuota");
                });

            modelBuilder.Entity("MatchingSystem.Data.Model.Role", b =>
                {
                    b.Navigation("UsersRoles");
                });

            modelBuilder.Entity("MatchingSystem.Data.Model.Stage", b =>
                {
                    b.Navigation("CommonQuota");

                    b.Navigation("Documents");

                    b.Navigation("TutorsChoices");
                });

            modelBuilder.Entity("MatchingSystem.Data.Model.StagesType", b =>
                {
                    b.Navigation("Stages");
                });

            modelBuilder.Entity("MatchingSystem.Data.Model.Student", b =>
                {
                    b.Navigation("StudentsPreferences");

                    b.Navigation("StudentsTechnologies");

                    b.Navigation("StudentsWorkDirections");

                    b.Navigation("TutorsChoices");

                    b.Navigation("UsersRoles");
                });

            modelBuilder.Entity("MatchingSystem.Data.Model.Technology", b =>
                {
                    b.Navigation("ProjectsTechnologies");

                    b.Navigation("StudentsTechnologies");
                });

            modelBuilder.Entity("MatchingSystem.Data.Model.Tutor", b =>
                {
                    b.Navigation("CommonQuota");

                    b.Navigation("Projects");

                    b.Navigation("TutorsGroups");

                    b.Navigation("UsersRoles");
                });

            modelBuilder.Entity("MatchingSystem.Data.Model.User", b =>
                {
                    b.Navigation("UsersRoles");
                });

            modelBuilder.Entity("MatchingSystem.Data.Model.WorkDirection", b =>
                {
                    b.Navigation("ProjectsWorkDirections");

                    b.Navigation("StudentsWorkDirections");
                });
#pragma warning restore 612, 618
        }
    }
}
