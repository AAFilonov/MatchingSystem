@{
    ViewData["title"] = "Администрирование";
    ViewData["active"] = "admin";
    Layout = "~/Views/Shared/_GeneralLayout.cshtml";
}

<!DOCTYPE html>

<html>
<head>
    <title>Инциализация распределения</title>
</head>
<body>
<div id="app">
    <div class="container mt-5">
        <div class="row">
            <h2 class="col col-12">Инциализация распределения</h2>
        </div>
        <div class="row">
            <div class="col col-12">
                <ul class="nav nav-tabs">
                    <li class="nav-item">
                        <a class="nav-link active" data-toggle="tab" href="#students">Студенты</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" :class="{ disabled: !studentsAreReady}" data-toggle="tab" href="#tutors">Преподаватели</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" :class="{ disabled: !tutorsAreReady}" data-toggle="tab" href="#allocation">Распределение</a>
                    </li>
                </ul>
                <div id="tabContent" class="tab-content m-4 ">
                    <div class="tab-pane fade mx-auto show active" id="students">
                        <div class="card">
                            <div class="card-header">
                                <h5>Студенты</h5>
                            </div>
                            <div class="card-body">
                                <div class="custom-file">
                                    <label for="studentsFile">Данные студентов</label>
                                    <input id="studentsFile" type="file" v-on:change="onStudentsFileChange"  accept=".xls,.xlsx,.csv">
                                </div>

                                <table class="table table-hover" v-if="studentsAreReady">
                                    <th style="cursor: pointer">
                                        <div class="d-flex align-items-center">
                                            <span>Группа</span>
                                        </div>
                                    </th>
                                    <th style="cursor: pointer">
                                        <div class="d-flex align-items-center">
                                            <span>Фамилия</span>
                                        </div>
                                    </th>
                                    <th style="cursor: pointer">
                                        <div class="d-flex align-items-center">
                                            <span>Имя</span>
                                        </div>

                                    </th>
                                    <th style="cursor: pointer">
                                        <div class="d-flex align-items-center">
                                            <span>Отчество</span>
                                        </div>

                                    </th>
                                    <tr v-for="student in matchingData.studentRecords">
                                        <td>{{student.groupName}}</td>
                                        <td>
                                            <input type="text" class="form-control" v-model="student.firstName"/>
                                        </td>
                                        <td>
                                            <input type="text" class="form-control" v-model="student.middleName"/>
                                        </td>
                                        <td>
                                            <input type="text" class="form-control" v-model="student.lastName"/>
                                        </td>
                                    </tr>
                                </table>
                            </div>
                        </div>
                    </div>

                    <div class="tab-pane fade mx-auto" id="tutors">
                        <div class="card">
                            <div class="card-header">
                                <h5>Преподаватели</h5>
                            </div>
                            <div class="card-body">
                                <div class="custom-file">
                                    <label for="tutorsFile">Данные преподавателей</label>
                                    <input id="tutorsFile" type="file" v-on:change="onTutorsFileChange"  accept=".xls,.xlsx,.csv">
                                </div>
                                
                                <table class="table table-hover" v-if="tutorsAreReady">
                                    <th>
                                        <div class="d-flex align-items-center">
                                            <span>Участвует</span>
                                        </div>
                                    </th>
                                    <th style="cursor: pointer">
                                        <div class="d-flex align-items-center">
                                            <span>ФИО</span>
                                        </div>
                                    </th>
                                    <th style="cursor: pointer">
                                        <div class="d-flex align-items-center">
                                            <span>Квота </span>
                                        </div>
                                    </th>
                                    <th style="cursor: pointer">
                                        <div class="d-flex align-items-center">
                                            <span>Группы</span>
                                        </div>
                                    </th>

                                    <tr v-for="tutor in matchingData.tutorRecords" v-bind:class="{'table-success': tutor.isIncluded }">
                                        <td>
                                            <input type="checkbox" v-model="tutor.isIncluded">
                                        </td>
                                        <td>{{tutor.nameAbbreviation}}</td>
                                        <td>
                                            <input type="number" class="form-control w-50" v-model="tutor.quota"/>
                                        </td>
                                        <td class="p-1">
                                            <div v-for="group in tutor.groups">
                                                <label> {{group.name}}</label>
                                                <input type="checkbox" v-model="group.value" checked>
                                            </div>
                                        </td>
                                    </tr>

                                </table>
                            </div>
                        </div>
                    </div>

                    <div class="tab-pane fade  col-5 mx-auto" id="allocation">
                        <div class="card">
                            <div class="card-header">
                                <h5>Новое распределение</h5>
                            </div>
                            <div class="card-body" id="matchingForm">
                                <div class="form-group">
                                    <label for="name">Название</label>
                                    <input type="text"
                                           class="form-control required"
                                           id="name"
                                           v-model="matchingData.matching.name"
                                           required
                                           placeholder="Название нового распределения">
                                </div>
                                <div class="form-group">
                                    <label for="matchingType">Тип распределения</label>
                                    <select class="form-control required"
                                            id="matchingType"
                                            v-model="matchingData.matching.typeCode">
                                        <option value="MG">Магистратура</option>
                                        <option value="BC">Бакалавриат</option>
                                    </select>
                                </div>
                                <div class="form-group">
                                    <label for="startDatePicker">Дата начала</label>
                                    <input type="date"
                                           class="required"
                                           id="startDatePicker"
                                           required
                                           v-model="matchingData.matching.startDate">
                                </div>
                                <button  class="btn btn-primary"
                                        v-on:click="postMatchingData">
                                    <span>Готово</span>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
</body>
</html>


<script>
function getCurrentDate() {
    var today = new Date();
    var minutes = String(today.getMinutes()).padStart(2, '0');
    var hours = String(today.getHours()).padStart(2, '0');
    var dd = String(today.getDate()).padStart(2, '0');
    var mm = String(today.getMonth() + 1).padStart(2, '0');
    var yyyy = today.getFullYear();
    
    return hours+'_'+ minutes+'_'+mm + '_' + dd + '_' + yyyy;
}
let app = new Vue({
  el: '#app',
  data (){
      return {
          matchingData:{
              matching:
                {
                    name:"",
                    typeCode:"",
                    startDate:"",
                },
              studentRecords:[], 
              groupRecords:[], 
              tutorRecords:[], 
          },
          studentFile: null,
          tutorsFile: null,
      }
  },
  async mounted(){ 
      this.getMatchingData();
   },
  computed:{
     studentsAreReady(){
         return this.matchingData.studentRecords.length>0;
     },
     tutorsAreReady(){
         return this.matchingData.tutorRecords.length>0;
     }
          
  },
  methods:{
     getMatchingData(){
          axios.get(`${params.basePath}/api/matchingInitialization/matching_data_sync`)                                                                                          
          .then(response => {
              this.matchingData =  response.data;            
          });
     },
     onStudentsFileChange(event){
          this.studentFile = event.target.files;        
          axios.post( `${params.basePath}/api/matchingInitialization/upload_students_data`,
            this.studentFile,{
              headers: {
                  'Content-Type': 'multipart/form-data'
              }
            }
          )
          .then(response =>this.onStudentsUploadSuccess(response))
          .catch(error => DisplayNotification('Ошибка при загрузке данных данных: '+ error.response.data,'error' ));
    
     },
     onTutorsFileChange(event){
               this.tutorsFile = event.target.files;              
               axios.post( `${params.basePath}/api/matchingInitialization/upload_tutors_data`,
                 this.tutorsFile,{
                   headers: {
                       'Content-Type': 'multipart/form-data'
                   }
                 }
               )
               .then(response => this.onTutorsUploadSuccess(response))
               .catch(error => DisplayNotification('Ошибка при загрузке данных данных: '+ error.response.data,'error' ));
          },
     async onStudentsUploadSuccess(response){
         if (response.data) {                       
             this.matchingData.studentRecords =  response.data;
             DisplayNotification('Данные загружены успешно');
         }
         else{
             DisplayNotification('Ошибка при загрузке данных','error' );
         }       
     }, 
     async onTutorsUploadSuccess(response){
         if (response.data) {                       
             this.matchingData.tutorRecords =  response.data;
             DisplayNotification('Данные загружены успешно');
         }
         else{
             DisplayNotification('Ошибка при загрузке данных','error' );
         }       
     }, 
     postMatchingData(){
        if (this.matchingData.matching.name ==="" ||this.matchingData.matching.typeCode ==="" ||this.matchingData.matching.startDate ==="" )
            return;
        axios.post( `${params.basePath}/api/matchingInitialization/create_matching`,
          this.matchingData,{
            headers: {
                'Content-Type': 'application/json'
            }
          }
        )
        .then(response =>{         
          this.exportStudents();
          DisplayNotification('Запрос на создание распределения отправлен!');
          window.location.href="../"
        })
        .catch(function(reason){
           DisplayNotification('Ошибка при создании распределения','error' );
        });
     },
     async exportStudents(){
        axios.get(`${params.basePath}/api/matchingInitialization/student_data_report`,{ responseType: 'blob'})                                                                      
            .then(response => {
                this.matchingData =  response.data; 
                console.log(response.data);
                const blob = new Blob([response.data], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' }) ;
                const link = document.createElement('a') ;
                link.href = URL.createObjectURL(blob) ;
                var today = getCurrentDate();
                link.download = "students_"+today+".xlsx" ;
                link.click();
                URL.revokeObjectURL(link.href);
        });
     },   
  }
})
</script>